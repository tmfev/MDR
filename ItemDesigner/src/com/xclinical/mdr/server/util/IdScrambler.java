/* Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.    
 */
package com.xclinical.mdr.server.util;

import java.math.BigInteger;

/**
 * Generates unique strings from given long values.
 * 
 * The algorithm used to create the strings will ensure that
 * <ol>
 * 	<li>All strings will have the same length</li>
 * 	<li>All strings will be unique for any given value</li>
 * </ol>
 * 
 * @author michael@mictale.com
 */
public class IdScrambler {

	private static final char[] CODES = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
		'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',
		'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
		};

	/**
	 * A prime number that we use to generate the codes. If you change this number,
	 * this scrambler will generate different codes.
	 */
	private static final BigInteger PRIME = new BigInteger("1759452407304813269615619081855885739163790606473");

	/**
	 * The biggest code this scrambler can handle
	 * 
	 * This value will be 2^length
	 */
	private final BigInteger max;

	/**
	 * The length of codes generated by this scrambler in characters.
	 */
	private final int length;
	
	/**
	 * Creates a new generator.
	 *  
	 * @param length is the length of the generated names in characters.
	 */
	public IdScrambler(int length) {		
		this.length = length;
		max = BigInteger.valueOf(CODES.length).pow(length);
	}

	private String encode(long id) {
		char[] c = new char[length];
		
		int ind = c.length - 1;
		while (id > 0) {
			if (ind < 0) throw new IllegalArgumentException();
			int cc = (int)(id % CODES.length);
			c[ind--] = CODES[cc];
			id /= CODES.length;
		}
		
		return new String(c, ind + 1, c.length - ind - 1);
	}

	private long scramble(long id) {
		BigInteger i = BigInteger.valueOf(id);
		i = i.multiply(PRIME);
		i = i.mod(max);
		return i.longValue();
	}

	/**
	 * Return a new, unique identifier.
	 * The identifier will never be the same for the same generator name.
	 * @return the unique identifier.
	 * @throws IllegalArgumentException when the value is too large to be encoded by this scrambler.
	 */
	public String allocate(long id) {
		if (id > max.longValue()) throw new IllegalArgumentException("The generator ran out of identifiers");
		
		String pid = encode(scramble(id));
		return pid;
	}
}
