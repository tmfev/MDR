/* ODM 1.3
 *
 */
@urn "urn:mdr:data#odm130"
@name "ODM 1.3 Import Template"
@version "1.1"
@author "Michael Schollmeyer"
@email "ms@xclinical.com"

import net.xclinical.iso11179.Item;
import net.xclinical.iso11179.ValueDomain;
import net.xclinical.iso11179.Context;
import net.xclinical.iso11179.DataType;
import net.xclinical.iso11179.DataElementConcept;
import net.xclinical.iso11179.DataElement;
import net.xclinical.iso11179.Designation;
import net.xclinical.iso11179.Namespace;
import net.xclinical.iso11179.Relation;
import net.xclinical.iso11179.ScopedIdentifier;
import net.xclinical.iso11179.LanguageIdentification;
import net.xclinical.iso11179.ConceptSystem;
import net.xclinical.iso11179.ConceptualDomain;
import net.xclinical.iso11179.IdentifiedItem;
import net.xclinical.iso11179.UnitOfMeasure;
import net.xclinical.iso11179.PermissibleValue;
import net.xclinical.iso11179.ValueMeaning;

import net.xclinical.mdt.Utils;
import net.xclinical.mdt.Log;

["/"] {

var lang = Namespace : Namespace.find("urn:ietf:rfc:4646") {
	oneNamePerItem = true;
	oneItemPerName = true;
	mandatoryNamingConvention = true;
	shorthandPrefix = "lang";
	namespaceSchemeReference = "urn:ietf:rfc:4646";
}

var enUS = LanguageIdentification.findOrCreate("en-US");
var deDE = LanguageIdentification.findOrCreate("de_DE");

var mdr = Context.root();

var odmTypes = Namespace : Namespace.find("http://www.cdisc.org/ns/odm/v1.3") {
	oneNamePerItem = true;
	oneItemPerName = true;
	mandatoryNamingConvention = true;
	shorthandPrefix = "mdr";
	namespaceSchemeReference = "http://www.cdisc.org/ns/odm/v1.3";
}

DataType : Item.find(odmTypes, "text") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "text"; }
	name = "text";
	description = "any sequence of characters";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "integer") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "integer"; }
	name = "integer";
	description = "-?digit+";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "float") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "float"; }
	name = "float";
	description = "-?digit+(.digit+)?";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "date") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "date"; }
	name = "date";
	description = "YYYY-MM-DD";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "time") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "time"; }
	name = "time";
	description = "hh:mm:ss(.n+)? ((+|-)hh:mm)?";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "datetime") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "datetime"; }
	name = "datetime";
	description = "YYYY-MM-DD T hh:mm:ss(.n+)? ((+|-)hh:mm)?";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "string") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "string"; }
	name = "string";
	description = "Semantically equivalent to text but directly supported as XML schema datatype";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "boolean") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "boolean"; }
	name = "boolean";
	description = "(true | false | 1 | 0)";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "double") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "double"; }
	name = "double";
	description = "(((\\+|-)?[0-9]+(\\.[0-9]+)?((D|d|E|e)(\\+|-)[0-9]+)?)|(-?INF)|(NaN))";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "hexBinary") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "hexBinary"; }
	name = "hexBinary";
	description = "hex-encoded binary stream data";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "base64Binary") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "base64Binary"; }
	name = "base64Binary";
	description = "binary stream encoded using Base64 Alphabet";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "hexFloat") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "hexFloat"; }
	name = "hexFloat";
	description = "up to 16 characters";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "base64Float") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "base64Float"; }
	name = "base64Float";
	description = "up to 12 characters";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "partialDate") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "partialDate"; }
	name = "partialDate";
	description = "YYYY[-MM[-DD ]]";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "partialTime") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "partialTime"; }
	name = "partialTime";
	description = "hh[:mm[:ss(.n+)? ((+|-)hh:mm)?]]";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "partialDatetime") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "partialDatetime"; }
	name = "partialDatetime";
	description = "YYYY[-MM[-DD ]]T hh[:mm[:ss(.n+)? ((+|-)hh:mm)?]]";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "durationDatetime") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "durationDatetime"; }
	name = "durationDatetime";
	description = "(((+|-)?P((((n(n+)?)Y)?((nn+)?)M)?((nn+)?)D)?)(T(((n(n+)?)H)?((n(n+)?)M)?((n(n+)?)((\\.n+)?)S)?)?)?|(((n(n+)?)W))))";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "intervalDatetime") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "intervalDatetime"; }
	name = "intervalDatetime";
	description = "partialDatetime/partialDatetime)|(durationDatetime/partialDatetime)|(partialDatetime/durationDatetime)";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "incompleteDatetime") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "incompleteDatetime"; }
	name = "incompleteDatetime";
	description = "[YYYY|-]-[MM |-]-[DD|-]]]T[hh|-]:[mm|-]:[ss.s|-][?(+|-)nn:nn|Z]";
	schemeReference = "ODM 1.3";
}

DataType : Item.find(odmTypes, "URI") {
	scopedIdentifier = ScopedIdentifier { scope = odmTypes; identifier = "URI"; }
	name = "URI";
	description = "a URI formatted string";
	schemeReference = "ODM 1.3";
}

["//Study"] {
	var study = Context {
		mdr.designate(this, Utils.concat("Study ", ["GlobalVariables/StudyName"]), enUS);
	}
	
	var studyNs = Utils.concat("urn:mdr:study:", ["@OID"]);
	var ns = Namespace : Namespace.find(studyNs) {
		oneNamePerItem = true;
		oneItemPerName = true;
		mandatoryNamingConvention = true;
		namespaceSchemeReference = studyNs;
	}

	var measurementUnits = Context {
		study.designate(this, "Measurement Units", enUS);
	}

	["BasicDefinitions/MeasurementUnit"] {
		var unitOfMeasure = UnitOfMeasure {
			scopedIdentifier = ScopedIdentifier { identifier = ["@OID"]; scope = ns;}
			study.define(this, ["@Name"]);                            
		}
			
		["Symbol"] {
			["TranslatedText"] {
				measurementUnits.designate(unitOfMeasure, Utils.trim(["text()"]), LanguageIdentification.findOrCreate(["@lang"]));
			}
		}
	}		

	["MetaDataVersion"] {
	    Log.m(Utils.concat(">>> Found MetaDataVersion: ", ["@OID"]));

		var codeLists = Context {
			study.designate(this, "Code Lists", enUS);
		}

		var codeListItems = Context {
			study.designate(this, "Code List Items", enUS);
		}

		["CodeList"] {
			var codeList = ValueDomain {
				scopedIdentifier = ScopedIdentifier { identifier = ["@OID"]; scope = ns;}
				codeLists.designate(this, ["@Name"], enUS);            
         
				dataType = Item.find(odmTypes, ["@DataType"]);
                       
				["CodeListItem"] {
					var member = PermissibleValue {
						permittedValue = ["@CodedValue"];                                            
					}
                    
					var valueMeaning = ValueMeaning {
					}

					["Decode"] {
						["TranslatedText"] {
							codeListItems.designate(valueMeaning, Utils.trim(["text()"]), LanguageIdentification.findOrCreate(["@lang"]));
						}
					}

					member.setMeaning(valueMeaning);
					this.addMember(member);
				}
			}			
		}														

		["StudyEventDef"] {
		    Log.m(Utils.concat(">>> Found StudyEventDef: ", ["@OID"]));

			var event = Context {
				study.designate(this, ["@Name"], enUS);
			}

			["FormRef"] {
				var formOID = ["@FormOID"];
			    Log.m(Utils.concat(">>> Found FormRef: ", formOID));

				[Utils.concat("//FormDef[@OID='", formOID, "']")] {
			    	Log.m(Utils.concat(">>> Found FormDef: ", ["@OID"]));
						
					var form = Context {
						event.designate(this, ["@Name"], enUS);
					}					
						
					["ItemGroupRef"] {
						var itemGroupOID = ["@ItemGroupOID"];
						Log.m(Utils.concat(">>> Found ItemGroupRef: ", itemGroupOID));
					
						[Utils.concat("//ItemGroupDef[@OID='", itemGroupOID, "']")] {
							Log.m(Utils.concat(">>> Found ItemGroupDef: ", ["@OID"]));
						
							var itemGroup = Context {
								form.designate(this, ["@Name"], enUS);
							}					
										
							["ItemRef"] {
								var itemOID = ["@ItemOID"];
								Log.m(Utils.concat(">>> Found ItemRef: ", itemOID));
					
								[Utils.concat("//ItemDef[@OID='", itemOID, "']")] {
									Log.m(Utils.concat(">>> Found ItemDef: ", ["@OID"]));
																								
									var dataElement = DataElement {
										scopedIdentifier = ScopedIdentifier { identifier = ["@OID"]; scope = ns;}
										itemGroup.define(this, ["@Name"]);                
                
										var dt = Item.find(odmTypes, ["@DataType"]);												
										
										["CodeListRef"] {
											domain = Item.find(ns, ["@CodeListOID"]);
										}                
										
										["MeasurementUnitRef"] {
											domain = ValueDomain {
												unitOfMeasure = Item.find(ns, ["@MeasurementUnitOID"]);												
												dataType = dt;
											}													
										}                										
									}
			
									["Description"] {
										["TranslatedText"] {
											itemGroup.designate(dataElement, Utils.trim(["text()"]), LanguageIdentification.findOrCreate(["@lang"]));
										}
									}

									["Question"] {
										["TranslatedText"] {
											itemGroup.designate(dataElement, Utils.trim(["text()"]), LanguageIdentification.findOrCreate(["@lang"]));
										}
									}	
									
									// If the ItemRef has neither Description nor Question elements, add a default from its name.
									if (!dataElement.hasDesignations()) {
										Log.m(Utils.concat("Inserting artificial designation for: ", itemOID));
										itemGroup.designate(dataElement, Utils.trim(["@Name"]), deDE);
									}
								}			
							}																												
						}			
					}								
				}			
			}			
		}
	}
}
}

