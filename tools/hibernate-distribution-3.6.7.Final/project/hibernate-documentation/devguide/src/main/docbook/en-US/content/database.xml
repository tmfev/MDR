<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="hibernate-dev-database">
    <title>Database Access</title>

    <section id="hibernate-dev-database-connect">
        <title>JDBC Connections</title>
        <para>
            Hibernate understands how to connect to a database through an interface
            <interfacename>org.hibernate.connection.ConnectionProvider</interfacename>.  While
            <interfacename>org.hibernate.connection.ConnectionProvider</interfacename> is considered an extension SPI,
            Hibernate comes with a number of built-in providers.
        </para>

        <section id="hibernate-dev-database-connect-pools">
            <title>Using connection pooling</title>

            <para>
                The built-in connection pooling based providers all require the following settings
            </para>
            <variablelist>
                <varlistentry>
                    <term><property>hibernate.connection.driver_class</property></term>
                    <listitem>
                        <para>
                            Names the <interfacename>java.sql.Driver</interfacename> implementation class from your JDBC
                            provider.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><property>hibernate.connection.url</property></term>
                    <listitem>
                        <para>
                            The JDBC connection url.  See your JDBC provider's documentation for details and examples.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><property>hibernate.connection.username</property></term>
                    <listitem>
                        <para>
                            The name of the user to use when opening a JDBC <interfacename>java.sql.Connection</interfacename>.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><property>hibernate.connection.password</property></term>
                    <listitem>
                        <para>
                            The password associated with the provided username.
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>

            <section id="hibernate-dev-database-connect-pools-hibernate">
                <title>Using Hibernate's built-in connection pooling</title>

                <warning>
                    <para>
                        The built-in Hibernate connection pool is not intended for production use.  It lacks several
                        features found on any decent connection pool.  However, it can be quite useful to get started
                        and in unit testing.
                    </para>
                </warning>

                <para>
                    The only additional supported setting for the built-in pooling is the
                    <property>hibernate.connection.pool_size</property> setting which tells the pool how many
                    connections maximum it can keep in the pool.
                </para>
            </section>

            <section id="hibernate-dev-database-connect-pools-c3p0">
                <title>Using c3p0 for connection pooling</title>
                <para>
                    <!-- todo : what exactly needs discussed here? -->
                    To be continued...
                </para>
            </section>

            <section id="hibernate-dev-database-connect-pools-proxool">
                <title>Using proxool for connection pooling</title>
                <para>
                    <!-- todo : what exactly needs discussed here? -->
                    To be continued...
                </para>
            </section>

        </section>

        <section id="hibernate-dev-database-connect-dataSource">
            <title>Using <interfacename>javax.sql.DataSource</interfacename></title>
            <!-- todo : centralized discussion of JNDI properties -->
            <para>
                Hibernate can also use a <interfacename>javax.sql.DataSource</interfacename> to obtain
                connections.  To do so, Hibernate expects to be able to locate the
                <interfacename>javax.sql.DataSource</interfacename> in <literal>JNDI</literal>.  The
                <property>hibernate.connection.datasource</property> setting tells Hibernate the <literal>JNDI</literal>
                namespace at which it can find the the <interfacename>javax.sql.DataSource</interfacename>.
            </para>

            <para>
                Generally speaking a <interfacename>javax.sql.DataSource</interfacename> is configured to connect to
                the database using a single set of credentials (username/password).  Sometimes, however, the
                <interfacename>javax.sql.DataSource</interfacename> is set up so that the credentials have to be
                used to obtain a <interfacename>java.sql.Connection</interfacename> from it.  In these cases
                applications would specify the credentials via the <property>hibernate.connection.username</property>
                and <property>hibernate.connection.password</property> settings, which Hibernate would pass along to the
                <interfacename>javax.sql.DataSource</interfacename> when obtaining a
                <interfacename>java.sql.Connection</interfacename> from it.
            </para>
        </section>

    </section>

    <section id="hibernate-dev-database-dialect">
        <title>Database Dialects</title>
        <para>
            A <firstterm><phrase>Dialect</phrase></firstterm> informs Hibernate of the capabilities of the
            underlying database.  This role is fulfilled by an instance of a
            <classname>org.hibernate.dialect.Dialect</classname> subclass.  The Dialect is one of the most important
            pieces of information given to the Hibernate <interfacename>org.hibernate.Sessionfactory</interfacename>
            during startup as it allows Hibernate to properly plan how it needs to communicate with the database.
        </para>

        <section id="hibernate-dev-database-dialect-config">
            <title>Specifying the Dialect to use</title>
            <para>
                The developer may manually specify the Dialect to use by setting the
                <property>hibernate.dialect</property> configuration property to the name of the specific
                <classname>org.hibernate.dialect.Dialect</classname> class to use.
            </para>
        </section>

        <section id="hibernate-dev-database-dialect-resolution">
            <title>Dialect resolution</title>
            <para>
                Assuming a <interfacename>org.hibernate.connection.ConnectionProvider</interfacename> has been
                set up according to <xref linkend="hibernate-dev-database-connect"/> then Hibernate will attempt
                to automatically determine the Dialect to use based on the
                <interfacename>java.sql.DatabaseMetaData</interfacename> reported by a
                <interfacename>java.sql.Connection</interfacename> obtained from that
                <interfacename>org.hibernate.connection.ConnectionProvider</interfacename>.
            </para>
            <para>
                This functionality is provided by a series of
                <interfacename>org.hibernate.dialect.resolver.DialectResolver</interfacename> instances registered
                with Hibernate internally.  Hibernate comes with a standard set of recognitions.  If your application
                requires extra Dialect resolution capabilities, it would simply register a custom implementation
                of <interfacename>org.hibernate.dialect.resolver.DialectResolver</interfacename> as follows
            </para>
            <example id="hibernate-dev-database-dialect-resolution-registration">
                <title>Registering a custom <interfacename>org.hibernate.dialect.resolver.DialectResolver</interfacename></title>
                <programlisting role="JAVA"><![CDATA[
    org.hibernate.dialect.resolver.DialectFactory.registerDialectResolver( "org.hibernate.example.CustomDialectResolver" );
]]></programlisting>
            </example>
            <para>
                Registered <interfacename>org.hibernate.dialect.resolver.DialectResolver</interfacename> are
                <emphasis>prepended</emphasis> to an internal list of resolvers, so they take precedence
                before any already registered resolvers including the standard one. 
            </para>
        </section>

        <section id="hibernate-dev-database-dialect-custom">
            <title>Custom Dialects</title>
            <para>
                It is sometimes necessary for developers to write a custom Dialect for Hibernate to use.  Generally
                this is as simple as selecting a particular <classname>org.hibernate.dialect.Dialect</classname>
                implementation that is closest to your needs and subclassing it and overriding where necessary.
            </para>
            <para>
                Custom dialects may be manually specified as outlined in
                <xref linkend="hibernate-dev-database-dialect-config"/> as well as registered through a resolver as
                outlined in <xref linkend="hibernate-dev-database-dialect-resolution-registration"/>.
            </para>
        </section>
    </section>

    <section id="hiberate-dev-database-schema">
        <title>Database Schema</title>
        <para>
            <!-- todo : what exactly needs discussed here? -->
            To be continued...
        </para>
    </section>

</chapter>