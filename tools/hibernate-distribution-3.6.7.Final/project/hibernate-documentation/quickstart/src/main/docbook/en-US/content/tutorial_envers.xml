<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="hibernate-gsg-tutorial-envers">
    <title>Tutorial Using Envers</title>

    <para>
        This tutorial is located within the download bundle under <filename>envers</filename> and illustrates
        <itemizedlist>
            <listitem>
                <para>
                    configuring Envers
                </para>
            </listitem>
            <listitem>
                <para>
                    using the Envers APIs to look back through history
                </para>
            </listitem>
        </itemizedlist>
    </para>

    <section id="hibernate-gsg-tutorial-envers-config">
        <title><filename>persistence.xml</filename></title>
        <para>
            This file was discussed in the <phrase>JPA</phrase> tutorial, and is largely the same here.  The major
            difference is the set of properties defining <firstterm><phrase>listeners</phrase></firstterm>.
            Essentially this enables Envers to recieve notfications from Hibernate processing of certain
            <firstterm><phrase>events</phrase></firstterm> such as an entity being saved or updated.
        </para>
    </section>

    <section id="hibernate-gsg-tutorial-envers-entity">
        <title>The annotated entity Java class</title>
        <para>
            Again, the entity is largely the same as seen in the <phrase>JPA</phrase> tutorial.  The major
            difference to notice is the addition of the <interfacename>@org.hibernate.envers.Audited</interfacename>
            annotation which tells Envers to automatically track changes to this entity.
        </para>
    </section>

    <section id="hibernate-gsg-tutorial-envers-test">
        <title>Example code</title>
        <para>
            Again, this tutorial makes use of the <phrase>JPA</phrase> APIs.  However, the code also makes a
            change to one of the entites and then uses the Envers API to pull back the initial revision (version)
            as well as the updated revision.
        </para>
        <example id="hibernate-gsg-tutorial-envers-test-api">
            <title>Using the <interfacename>org.hibernate.envers.AuditReader</interfacename></title>
            <programlisting role="JAVA">public void testBasicUsage() {
    ...
    AuditReader reader = AuditReaderFactory.get( entityManager );
    Event firstRevision = reader.find( Event.class, 2L, 1 );
    ...
    Event secondRevision = reader.find( Event.class, 2L, 2 );
    ...
}</programlisting>
        </example>
        <para>
            First an <interfacename>org.hibernate.envers.AuditReader</interfacename> is obtained
            from the <classname>org.hibernate.envers.AuditReaderFactory</classname> wrapping the
            <interfacename>javax.persistence.EntityManager</interfacename>.
        </para>
        <para>
            Then the <methodname>find</methodname> method is used to retrieve specific revisions of the entity.  The
            first call reads "find revision number 1 of Event with id 2".  The second call reads "find revision
            number 2 of Event with id 2".
        </para>
    </section>

</chapter>